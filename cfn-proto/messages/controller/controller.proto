syntax = "proto3";
package controller;
option go_package = "github.com/9triver/ignis/proto/controller";

import "platform.proto";
import "resource/resource.proto";

enum CommandType {
  UNSPECIFIED = 0; // unknown command type
  ACK = 1; // acknowledged
  FR_READY = 2;
  FR_APPEND_DATA = 3; // frontend: append data node
  FR_APPEND_PY_FUNC = 4; // frontend: append python function (control node definition)
  FR_APPEND_ARG = 5; // frontend: append function arg to specified actor
  BK_RETURN_RESULT = 6; // backend: send back execution result
}

message Ack {
  string Error = 1;
}

message Ready {}

message AppendData {
  string SessionID = 1; // current execution session, empty if shared by all sessions
  proto.EncodedObject Object = 2; // encoded object
}

message AppendPyFunc {
  string Name = 1; // function name
  repeated string Params = 2; //function params
  string Venv = 3; // function virtual environment
  repeated string Requirements = 4; // function dependencies
  bytes PickledObject = 5; // encoded function impl
  proto.Language Language = 6; // return type of function
  resource.Resource Resource = 7; // requested resources by task (added by kekwy 25/4/16)
}

message AppendArg {
  string SessionID = 1; // current execution session
  string InstanceID = 2; // id of function instance under current execution session
  string Name = 3; // function name
  string Param = 4; // param name
  proto.Flow Value = 5; // object ref for param
}

message ReturnResult {
  string SessionID = 1; // current execution session
  string InstanceID = 2; // id of function instance under current execution session
  string Name = 3; // function name
  oneof Result {
    proto.Flow Value = 4; // success: return result
    string Error = 5; // fail: return error
  }
}

message Message {
  string Conn = 1;
  CommandType Type = 2;
  oneof Command {
    Ack Ack = 3;
    Ready Ready = 4;
    AppendData AppendData = 5;
    AppendPyFunc AppendPyFunc = 6;
    AppendArg AppendArg = 7;
    ReturnResult ReturnResult = 8;
  }
}

service Service {
  rpc ControllerSession(stream Message) returns (stream Message) {}
}
